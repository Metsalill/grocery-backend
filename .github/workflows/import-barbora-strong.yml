name: Import Barbora Strong Matches + Product Links (Railway)

on:
  workflow_dispatch:
    inputs:
      BACKFILL_RIGHT_EPM:
        description: "Also backfill right-side ext_product_map from strong matches?"
        required: false
        default: "false"   # set to "true" to enable optional step

jobs:
  import-strong:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}
      BACKFILL_RIGHT_EPM: ${{ inputs.BACKFILL_RIGHT_EPM }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Show expected files (debug)
        run: |
          echo "Looking for CSVs under data/matches/:"
          ls -al data/matches || true

      - name: Prepare tables (idempotent & schema-aware)
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X <<'SQL'
          -- Staging mirrors CSV headers produced by the matcher
          CREATE TABLE IF NOT EXISTS staging_barbora_matches (
            left_chain        text,
            left_ext_id       text,
            left_name         text,
            left_brand        text,
            left_size_text    text,
            right_chain       text,
            right_ext_id      text,
            right_name        text,
            right_brand       text,
            right_size_text   text,
            match_reason      text,
            match_score       numeric
          );

          -- Final table for ext_id<->ext_id matches (do NOT alter existing PKs)
          CREATE TABLE IF NOT EXISTS approved_matches_active (
            source_chain        text,
            source_ext_id       text,
            target_chain        text,
            target_ext_id       text,
            score               numeric,
            tier                text,
            left_name           text,
            left_brand          text,
            left_size_text      text,
            right_name          text,
            right_brand         text,
            right_size_text     text
          );

          -- Add any missing columns safely
          ALTER TABLE approved_matches_active
            ADD COLUMN IF NOT EXISTS source_chain        text,
            ADD COLUMN IF NOT EXISTS source_ext_id       text,
            ADD COLUMN IF NOT EXISTS target_chain        text,
            ADD COLUMN IF NOT EXISTS target_ext_id       text,
            ADD COLUMN IF NOT EXISTS score               numeric,
            ADD COLUMN IF NOT EXISTS tier                text,
            ADD COLUMN IF NOT EXISTS left_name           text,
            ADD COLUMN IF NOT EXISTS left_brand          text,
            ADD COLUMN IF NOT EXISTS left_size_text      text,
            ADD COLUMN IF NOT EXISTS right_name          text,
            ADD COLUMN IF NOT EXISTS right_brand         text,
            ADD COLUMN IF NOT EXISTS right_size_text     text;

          -- Unique index for ON CONFLICT upsert (safe if it already exists)
          CREATE UNIQUE INDEX IF NOT EXISTS ux_approved_matches_active_source_target
          ON approved_matches_active (source_chain, source_ext_id, target_chain);

          -- Product-level link table (by product_id)
          CREATE TABLE IF NOT EXISTS approved_product_links (
            left_chain       text,
            left_product_id  bigint,
            right_chain      text,
            right_product_id bigint,
            score            numeric,
            tier             text,
            PRIMARY KEY (left_chain, left_product_id, right_chain)
          );
          SQL

      - name: Import only *strong* CSVs from data/matches/
        run: |
          set -euo pipefail
          shopt -s nullglob

          files=(data/matches/matches_Barbora_to_*_strong.csv)
          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No *strong* CSVs found at data/matches/."
            echo "Expected files like: matches_Barbora_to_Rimi_strong.csv"
            exit 1
          fi

          # Clean staging
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X -c "TRUNCATE staging_barbora_matches;"

          # Load strong CSVs into staging
          for f in "${files[@]}"; do
            echo "➡️ Loading $f"
            psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X \
              -c "\copy staging_barbora_matches FROM '${f}' WITH (FORMAT CSV, HEADER, ENCODING 'UTF8')"
