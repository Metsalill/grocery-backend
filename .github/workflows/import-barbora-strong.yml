name: Import Barbora Strong Matches (Railway)

on:
  workflow_dispatch:

jobs:
  import-strong:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Show expected files (debug)
        run: |
          ls -al
          echo "Looking for CSVs under data/matches/:"
          ls -al data/matches || true

      - name: Prepare tables (idempotent & schema-aware)
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X <<'SQL'
          -- Staging mirrors CSV headers
          CREATE TABLE IF NOT EXISTS staging_barbora_matches (
            left_chain        text,
            left_ext_id       text,
            left_name         text,
            left_brand        text,
            left_size_text    text,
            right_chain       text,
            right_ext_id      text,
            right_name        text,
            right_brand       text,
            right_size_text   text,
            match_reason      text,
            match_score       numeric
          );

          -- Final table (create if missing; do NOT change existing PK)
          CREATE TABLE IF NOT EXISTS approved_matches_active (
            source_chain        text,
            source_ext_id       text,
            target_chain        text,
            target_ext_id       text,
            score               numeric,
            tier                text,
            left_name           text,
            left_brand          text,
            left_size_text      text,
            right_name          text,
            right_brand         text,
            right_size_text     text
          );

          -- Add any missing columns safely
          ALTER TABLE approved_matches_active
            ADD COLUMN IF NOT EXISTS source_chain        text,
            ADD COLUMN IF NOT EXISTS source_ext_id       text,
            ADD COLUMN IF NOT EXISTS target_chain        text,
            ADD COLUMN IF NOT EXISTS target_ext_id       text,
            ADD COLUMN IF NOT EXISTS score               numeric,
            ADD COLUMN IF NOT EXISTS tier                text,
            ADD COLUMN IF NOT EXISTS left_name           text,
            ADD COLUMN IF NOT EXISTS left_brand          text,
            ADD COLUMN IF NOT EXISTS left_size_text      text,
            ADD COLUMN IF NOT EXISTS right_name          text,
            ADD COLUMN IF NOT EXISTS right_brand         text,
            ADD COLUMN IF NOT EXISTS right_size_text     text;

          -- Ensure we have a UNIQUE INDEX for upsert (even if PK differs)
          CREATE UNIQUE INDEX IF NOT EXISTS ux_approved_matches_active_source_target
          ON approved_matches_active (source_chain, source_ext_id, target_chain);
          SQL

      - name: Import only *strong* CSVs from data/matches/
        run: |
          set -euo pipefail
          shopt -s nullglob

          files=(data/matches/matches_Barbora_to_*_strong.csv)
          if [ ${#files[@]} -eq 0 ]; then
            echo "❌ No *strong* CSVs found at data/matches/."
            echo "Expected files like: matches_Barbora_to_Rimi_strong.csv"
            exit 1
          fi

          # Clean staging
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X -c "TRUNCATE staging_barbora_matches;"

          # Load strong CSVs into staging
          for f in "${files[@]}"; do
            echo "➡️ Loading $f"
            psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X \
              -c "\copy staging_barbora_matches FROM '${f}' WITH (FORMAT CSV, HEADER, ENCODING 'UTF8')"
          done

          # Defensive filter: keep only strong
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X \
            -c "DELETE FROM staging_barbora_matches WHERE match_reason IS DISTINCT FROM 'strong';"

          # Upsert into final (uses the UNIQUE INDEX above)
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X <<'SQL'
          INSERT INTO approved_matches_active (
            source_chain, source_ext_id, target_chain, target_ext_id, score, tier,
            left_name, left_brand, left_size_text, right_name, right_brand, right_size_text
          )
          SELECT
            left_chain,
            left_ext_id,
            right_chain,
            NULLIF(right_ext_id,''),
            match_score,
            match_reason,
            left_name, left_brand, left_size_text,
            right_name, right_brand, right_size_text
          FROM staging_barbora_matches
          WHERE match_reason = 'strong'
          ON CONFLICT (source_chain, source_ext_id, target_chain)
          DO UPDATE SET
            target_ext_id     = EXCLUDED.target_ext_id,
            score             = EXCLUDED.score,
            tier              = EXCLUDED.tier,
            left_name         = EXCLUDED.left_name,
            left_brand        = EXCLUDED.left_brand,
            left_size_text    = EXCLUDED.left_size_text,
            right_name        = EXCLUDED.right_name,
            right_brand       = EXCLUDED.right_brand,
            right_size_text   = EXCLUDED.right_size_text;
          SQL

      - name: Quick verification (counts per chain)
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X <<'SQL'
          SELECT
            target_chain AS chain,
            COUNT(*)     AS strong_rows,
            ROUND(AVG(score)::numeric, 4) AS avg_score
          FROM approved_matches_active
          WHERE source_chain = 'Barbora' AND tier = 'strong'
          GROUP BY target_chain
          ORDER BY target_chain;
          SQL
