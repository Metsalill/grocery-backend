name: Selver - Seed stores (online + physical)

on:
  workflow_dispatch:
    inputs:
      geocode:
        description: "Geocode with Nominatim (0/1). If 1, adds lat/lon (slower)."
        required: false
        default: "0"
      chain:
        description: "Retail chain label"
        required: false
        default: "Selver"
      online_name:
        description: "Name of online store"
        required: false
        default: "e-Selver"
      dry_run:
        description: "Dry run (0/1) - parse only, no DB writes"
        required: false
        default: "0"

concurrency:
  group: seed-selver-stores
  cancel-in-progress: true

jobs:
  seed:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DATABASE_URL: ${{ secrets.RW_DATABASE_URL }}
      GEOCODE: ${{ github.event.inputs.geocode }}
      DRY_RUN: ${{ github.event.inputs.dry_run }}
      SELVER_CHAIN: ${{ github.event.inputs.chain }}
      ONLINE_NAME: ${{ github.event.inputs.online_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (Playwright + DB + HTTP)
        run: |
          python -m pip install --upgrade pip
          pip install playwright psycopg2-binary aiohttp
          python -m playwright install --with-deps chromium

      - name: Create Playwright seeder script (inline)
        shell: bash
        run: |
          cat > selver_seed_stores_pw.py << 'PY'
          import os, re, time, sys, asyncio, aiohttp
          import psycopg2
          from playwright.sync_api import sync_playwright

          DB_URL = os.environ.get("DATABASE_URL")
          if not DB_URL:
            print("::error::DATABASE_URL secret not set"); sys.exit(1)

          GEOCODE = os.environ.get("GEOCODE","0") == "1"
          DRY_RUN = os.environ.get("DRY_RUN","0") == "1"
          CHAIN   = os.environ.get("SELVER_CHAIN","Selver")
          ONLINE  = os.environ.get("ONLINE_NAME","e-Selver")

          NAME_PAT = re.compile(r'\b(?:Delice(?:\s+Toidupood)?|[A-Za-zÄÖÜÕäöüõ0-9\'\-\s]+?Selver(?:\s+ABC)?)\b', re.I)
          SCHEDULE_SPLIT = re.compile(r'\s+(?:E[-–]?P|E[-–]?[A-Z](?:\s*\d)?)\b')

          def extract_names_from_texts(texts):
            names = set()
            for t in texts:
              if not t: continue
              t = re.sub(r'\s+', ' ', t).strip()
              t = SCHEDULE_SPLIT.split(t)[0].strip()  # drop hours like "E-P 08:00-23:00"
              m = NAME_PAT.search(t)
              if not m: continue
              name = m.group(0).strip()
              if re.search(r'\be-?selver\b', name, re.I):  # skip e-Selver
                continue
              name = re.sub(r'\s{2,}', ' ', name)
              if len(name) >= 6:
                names.add(name)
