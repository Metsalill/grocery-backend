name: "Selver → Seed stores (online + physical)"

on:
  workflow_dispatch:
    inputs:
      geocode:
        description: "Geocode with Nominatim (0/1). If 1, adds lat/lon (slower)."
        required: false
        default: "0"
      chain:
        description: "Retail chain label"
        required: false
        default: "Selver"
      online_name:
        description: "Name of online store"
        required: false
        default: "e-Selver"
      dry_run:
        description: "Dry run (0/1) — parse only, no DB writes"
        required: false
        default: "0"

concurrency:
  group: seed-selver-stores
  cancel-in-progress: true

jobs:
  seed:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DATABASE_URL: ${{ secrets.RW_DATABASE_URL }}   # postgres://... (rw)
      GEOCODE: ${{ github.event.inputs.geocode }}
      DRY_RUN: ${{ github.event.inputs.dry_run }}
      SELVER_CHAIN: ${{ github.event.inputs.chain }}
      ONLINE_NAME: ${{ github.event.inputs.online_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 lxml psycopg2-binary

      - name: Create seeder script (inline)
        shell: bash
        run: |
          cat > selver_seed_stores.py << 'PY'
          import os, re, time, sys
          import requests
          from bs4 import BeautifulSoup
          import psycopg2, psycopg2.extras

          DB_URL = os.environ.get("DATABASE_URL")
          if not DB_URL:
            print("::error::DATABASE_URL secret not set")
            sys.exit(1)

          GEOCODE = os.environ.get("GEOCODE","0") == "1"
          DRY_RUN = os.environ.get("DRY_RUN","0") == "1"
          CHAIN = os.environ.get("SELVER_CHAIN","Selver")
          ONLINE_NAME = os.environ.get("ONLINE_NAME","e-Selver")

          UA = {"User-Agent":"grocery-backend/selver-seed-stores (+gha)"}

          def fetch_store_list():
            url = "https://www.selver.ee/kauplused"
            r = requests.get(url, headers=UA, timeout=60)
            r.raise_for_status()
            soup = BeautifulSoup(r.text, "lxml")

            # Heuristics: collect visible texts that look like store names ending with "Selver" or containing "Delice"
            names = set()
            for tag in soup.find_all(text=re.compile(r'(Selver|Delice)', re.I)):
              txt = re.sub(r'\s+', ' ', tag.strip())
              # Candidate like "Järve Selver", "Kadaka Selver", "Tartu Aardla Selver", "Delice Toidupood …"
              m = re.search(r'([A-Za-zÄÖÜÕäöüõ0-9\-\.\'\s]+(?:Selver|Delice)(?:\s+Toidupood)?)', txt)
              if m:
                name = m.group(1).strip()
                # Filter noisy matches
                if len(name) >= 6 and "e-Selver" not in name and "E-Selver" not in name:
                  # Normalize multiple spaces
                  name = re.sub(r'\s{2,}', ' ', name)
                  names.add(name)

            # Some pages may list in links/cards; add <a> titles containing Selver/Delice
            for a in soup.find_all("a"):
              t = (a.get("title") or a.get_text() or "").strip()
              if re.search(r'(Selver|Delice)', t, re.I):
                t = re.sub(r'\s+', ' ', t)
                if "e-Selver" not in t and len(t) >= 6:
                  names.add(t)

            # Remove obvious generic phrases
            bad = {"Kauplused", "Selver", "Meie kauplused"}
            names = {n for n in names if n not in bad}
            return sorted(names)

          def geocode(addr):
            if not addr:
              return None
            url = "https://nominatim.openstreetmap.org/search"
            params = {"q": addr, "format": "json", "limit": 1}
            r = requests.get(url, params=params, headers=UA, timeout=30)
            r.raise_for_status()
            data = r.json()
            if not data:
              return None
            return float(data[0]["lat"]), float(data[0]["lon"])

          def ensure_columns(conn):
            with conn.cursor() as cur:
              cur.execute("""
              DO $$
              BEGIN
                IF NOT EXISTS (
                  SELECT 1 FROM information_schema.columns
                  WHERE table_name='stores' AND column_name='chain'
                ) THEN
                  ALTER TABLE stores ADD COLUMN chain TEXT;
                END IF;

                IF NOT EXISTS (
                  SELECT 1 FROM information_schema.columns
                  WHERE table_name='stores' AND column_name='is_online'
                ) THEN
                  ALTER TABLE stores ADD COLUMN is_online BOOLEAN NOT NULL DEFAULT FALSE;
                END IF;

                IF NOT EXISTS (
                  SELECT 1 FROM information_schema.columns
                  WHERE table_name='stores' AND column_name='lat'
                ) THEN
                  ALTER TABLE stores ADD COLUMN lat DOUBLE PRECISION;
                END IF;

                IF NOT EXISTS (
                  SELECT 1 FROM information_schema.columns
                  WHERE table_name='stores' AND column_name='lon'
                ) THEN
                  ALTER TABLE stores ADD COLUMN lon DOUBLE PRECISION;
                END IF;
              END $$;
              """)

          def upsert_stores(conn, names):
            with conn.cursor() as cur:
              # Upsert online store
              cur.execute("""
                INSERT INTO stores (name, chain, is_online)
                VALUES (%s, %s, TRUE)
                ON CONFLICT DO NOTHING;
              """, (ONLINE_NAME, CHAIN))

              # Upsert physical stores (no geocode by default)
              for i, name in enumerate(names, 1):
                lat = lon = None
                if GEOCODE:
                  # Try to geocode "name, Estonia" as a hint
                  try:
                    latlon = geocode(f"{name}, Estonia")
                    if latlon:
                      lat, lon = latlon
                      time.sleep(1)  # friendly to Nominatim
                  except Exception as e:
                    print(f"Geocode failed for {name}: {e}")

                cur.execute("""
                  INSERT INTO stores (name, chain, is_online, lat, lon)
                  VALUES (%s, %s, FALSE, %s, %s)
                  ON CONFLICT DO NOTHING;
                """, (name, CHAIN, lat, lon))

          def main():
            stores = fetch_store_list()
            print(f"Found {len(stores)} Selver/Delice physical names:")
            for n in stores:
              print(" -", n)

            if DRY_RUN:
              print("Dry run enabled — skipping DB writes.")
              return

            conn = psycopg2.connect(DB_URL)
            conn.autocommit = True
            ensure_columns(conn)
            upsert_stores(conn, stores)
            conn.close()
            print("Upsert complete.")

          if __name__ == "__main__":
            main()
          PY

      - name: Run seeder
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          echo "GEOCODE=${GEOCODE} DRY_RUN=${DRY_RUN} CHAIN=${SELVER_CHAIN} ONLINE_NAME=${ONLINE_NAME}"
          python selver_seed_stores.py
