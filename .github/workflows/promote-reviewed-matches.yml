name: Apply approved Rimi C/D matches

on:
  workflow_dispatch: {}

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}  # external Railway URL
      PGSSLMODE: require
      PGCLIENTENCODING: UTF8

    steps:
      - uses: actions/checkout@v4

      - name: Install psql
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Sanity check DB
        run: psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "select current_database(), now();"

      - name: Create staging & load CSVs (if present)
        run: |
          set -euo pipefail
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          CREATE TABLE IF NOT EXISTS staging_approved_selver (
            rimi_id   bigint,
            selver_id bigint
          );
          CREATE TABLE IF NOT EXISTS staging_approved_prisma (
            rimi_id   bigint,
            prisma_id bigint
          );
          TRUNCATE staging_approved_selver;
          TRUNCATE staging_approved_prisma;
          SQL

          if [ -f data/approved_selver.csv ]; then
            echo "Loading data/approved_selver.csv"
            psql "$DATABASE_URL" -v ON_ERROR_STOP=1 \
              -c "\copy staging_approved_selver (rimi_id, selver_id) FROM 'data/approved_selver.csv' WITH (FORMAT csv, HEADER true)"
          else
            echo "No data/approved_selver.csv – skipping Selver."
          fi

          if [ -f data/approved_prisma.csv ]; then
            echo "Loading data/approved_prisma.csv"
            psql "$DATABASE_URL" -v ON_ERROR_STOP=1 \
              -c "\copy staging_approved_prisma (rimi_id, prisma_id) FROM 'data/approved_prisma.csv' WITH (FORMAT csv, HEADER true)"
          else
            echo "No data/approved_prisma.csv – skipping Prisma."
          fi

      - name: Upsert into product_matches and ext_product_map
        run: |
          set -euo pipefail
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          -- Uniques for conflicts
          CREATE UNIQUE INDEX IF NOT EXISTS uq_product_matches_src
            ON product_matches(source, source_product_id);
          CREATE UNIQUE INDEX IF NOT EXISTS uq_ext_product_map_src
            ON ext_product_map(source, ext_id);

          -- Approved Selver
          INSERT INTO product_matches (source, source_product_id, product_id, confidence, reason, confirmed, created_at)
          SELECT 'rimi', s.rimi_id, s.selver_id, 0.80, 'approved C/D (Selver)', TRUE, now()
          FROM staging_approved_selver s
          WHERE s.rimi_id IS NOT NULL AND s.selver_id IS NOT NULL
          ON CONFLICT (source, source_product_id) DO UPDATE
            SET product_id = EXCLUDED.product_id,
                confidence = EXCLUDED.confidence,
                reason     = EXCLUDED.reason,
                confirmed  = TRUE;

          -- Approved Prisma
          INSERT INTO product_matches (source, source_product_id, product_id, confidence, reason, confirmed, created_at)
          SELECT 'rimi', p.rimi_id, p.prisma_id, 0.80, 'approved C/D (Prisma)', TRUE, now()
          FROM staging_approved_prisma p
          WHERE p.rimi_id IS NOT NULL AND p.prisma_id IS NOT NULL
          ON CONFLICT (source, source_product_id) DO UPDATE
            SET product_id = EXCLUDED.product_id,
                confidence = EXCLUDED.confidence,
                reason     = EXCLUDED.reason,
                confirmed  = TRUE;

          -- Keep ext_product_map in sync for confirmed rows
          INSERT INTO ext_product_map (source, ext_id, product_id)
          SELECT 'rimi', pm.source_product_id::text, pm.product_id
          FROM product_matches pm
          WHERE pm.source = 'rimi' AND pm.confirmed = TRUE
          ON CONFLICT (source, ext_id) DO UPDATE
            SET product_id = EXCLUDED.product_id;
          SQL

      - name: Summary
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          SELECT 'selver_loaded' AS what, COUNT(*) FROM staging_approved_selver
          UNION ALL
          SELECT 'prisma_loaded', COUNT(*) FROM staging_approved_prisma
          UNION ALL
          SELECT 'rimi_confirmed_total', COUNT(*) FROM product_matches WHERE source='rimi' AND confirmed;
          SQL
