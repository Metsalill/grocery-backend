name: "Selver EAN Probe (from Prisma EANs)"

on:
  workflow_dispatch:
    inputs:
      batch_limit:
        description: "How many EANs to probe this run"
        required: false
        default: "300"
      delay_seconds:
        description: "Delay between page hits (seconds)"
        required: false
        default: "0.4"
  schedule:
    - cron: "15 2 * * *"   # daily 02:15 UTC (adjust/disable as needed)

concurrency:
  group: selver-ean-probe
  cancel-in-progress: true

jobs:
  probe-and-upsert:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (Playwright)
        shell: bash
        run: |
          set -euo pipefail
          pip install playwright
          python -m playwright install --with-deps chromium

      - name: Install psql client
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Prepare workspace
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data

      - name: Verify probe script present
        shell: bash
        run: |
          set -euo pipefail
          test -f scripts/selver_probe_ean_pw.py || { echo "Missing scripts/selver_probe_ean_pw.py"; exit 1; }

      # Build Prisma EAN backlog (use COPY TO STDOUT; inject LIMIT via shell)
      - name: Build list of Prisma EANs to probe on Selver
        shell: bash
        run: |
          set -euo pipefail
          LIM="${{ github.event.inputs.batch_limit || '300' }}"

          SQL="
            COPY (
              WITH prisma AS (
                SELECT ean
                FROM products
                WHERE ean ~ '^[0-9]+$'
                  AND source_url ILIKE '%prismamarket.ee%'
              ),
              selver_seen AS (
                SELECT DISTINCT regexp_replace(ean_raw::text,'\\D','','g') AS ean
                FROM selver_candidates
                UNION
                SELECT DISTINCT p.ean
                FROM prices pr
                JOIN stores s ON s.id = pr.store_id AND s.chain ILIKE 'Selver'
                JOIN products p ON p.id = pr.product_id
              )
              SELECT p.ean
              FROM prisma p
              LEFT JOIN selver_seen s ON s.ean = p.ean
              WHERE s.ean IS NULL
              ORDER BY p.ean
              LIMIT ${LIM}
            ) TO STDOUT WITH (FORMAT CSV, HEADER TRUE)
          "

          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "$SQL" > data/prisma_eans_to_probe.csv

          if [ ! -s data/prisma_eans_to_probe.csv ]; then
            echo "::notice::No new Prisma EANs to probe this run."
          fi

      - name: Check probe input exists
        id: has_probe
        shell: bash
        run: |
          if [ -s data/prisma_eans_to_probe.csv ]; then
            echo "has=true" >> "$GITHUB_OUTPUT"
          else
            echo "has=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Probe EANs on Selver (Playwright)
        if: steps.has_probe.outputs.has == 'true'
        env:
          PYTHONUNBUFFERED: "1"
        shell: bash
        run: |
          set -euo pipefail
          DELAY="${{ github.event.inputs.delay_seconds || '0.4' }}"
          python scripts/selver_probe_ean_pw.py \
            data/prisma_eans_to_probe.csv \
            data/selver_probe.csv \
            "$DELAY"

      # Single-session psql: TEMP table + \copy + upserts (no heredocs)
      - name: Upsert probe results (candidates + prices + aliases)
        if: steps.has_probe.outputs.has == 'true'
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -s data/selver_probe.csv ]; then
            echo "No probe output â€” skipping upsert."
            exit 0
          fi

          printf '%s\n' \
            '\set ON_ERROR_STOP on' \
            'BEGIN;' \
            '' \
            '-- Temp table is session-scoped; keep everything in this psql session' \
            'CREATE TEMP TABLE staging_selver_probe(' \
            '  ext_id    text,' \
            '  url       text,' \
            '  ean       text,' \
            '  name      text,' \
            '  price_raw text,' \
            '  size_text text' \
            ');' \
            '' \
            '\copy staging_selver_probe FROM '\''data/selver_probe.csv'\'' CSV HEADER' \
            '' \
            '-- ensure exactly one online Selver store exists' \
            "INSERT INTO stores (name, chain, is_online) SELECT 'Selver e-Selver', 'Selver', TRUE WHERE NOT EXISTS (SELECT 1 FROM stores WHERE chain='Selver' AND is_online=TRUE);" \
            '' \
            '-- 1) candidates (idempotent)' \
            'INSERT INTO selver_candidates (ext_id, ean_norm, ean_raw, name, size_text, last_seen)' \
            'SELECT COALESCE(url, ext_id) AS ext_id,' \
            "       regexp_replace(ean,'\\D','','g') AS ean_norm," \
            '       ean AS ean_raw,' \
            "       NULLIF(name,'') AS name," \
            "       NULLIF(size_text,'') AS size_text," \
            '       now()' \
            'FROM staging_selver_probe' \
            'ON CONFLICT (ext_id) DO UPDATE SET' \
            '  last_seen = now(),' \
            '  name      = COALESCE(EXCLUDED.name, selver_candidates.name),' \
            '  ean_raw   = COALESCE(EXCLUDED.ean_raw, selver_candidates.ean_raw),' \
            '  size_text = COALESCE(EXCLUDED.size_text, selver_candidates.size_text);' \
            '' \
            '-- 2) prices (only if numeric)' \
            'WITH parsed AS (' \
            '  SELECT pe.product_id,' \
            "         NULLIF(replace(regexp_replace(price_raw, '[^0-9,.-]', '', 'g'), ',', '.'), '')::numeric AS price_num," \
            '         COALESCE(url, ext_id) AS source_url' \
            '  FROM staging_selver_probe sp' \
            "  JOIN product_eans pe ON pe.ean_norm = regexp_replace(sp.ean,'\\D','','g')" \
            '),' \
            'dedup AS (' \
            '  SELECT DISTINCT ON (product_id) product_id, price_num, source_url' \
            '  FROM parsed' \
            '  WHERE price_num IS NOT NULL' \
            '  ORDER BY product_id, price_num' \
            ')' \
            'INSERT INTO prices (store_id, product_id, price, currency, collected_at, source_url)' \
            "SELECT (SELECT id FROM stores WHERE chain='Selver' AND is_online=TRUE ORDER BY id LIMIT 1)," \
            '       d.product_id,' \
            "       d.price_num, 'EUR', now(), d.source_url" \
            'FROM dedup d' \
            'ON CONFLICT (product_id, store_id) DO UPDATE SET' \
            '  price        = EXCLUDED.price,' \
            '  currency     = EXCLUDED.currency,' \
            '  collected_at = EXCLUDED.collected_at,' \
            '  source_url   = EXCLUDED.source_url;' \
            '' \
            '-- 3) aliases' \
            'INSERT INTO product_aliases (product_id, alias)' \
            'SELECT pe.product_id, left(btrim(sp.name), 200)' \
            'FROM staging_selver_probe sp' \
            "JOIN product_eans pe ON pe.ean_norm = regexp_replace(sp.ean,'\\D','','g')" \
            "WHERE sp.name IS NOT NULL AND btrim(sp.name) <> ''" \
            'ON CONFLICT (product_id, alias) DO NOTHING;' \
            '' \
            '-- summary' \
            'SELECT' \
            '  (SELECT COUNT(*) FROM staging_selver_probe) AS probed,' \
            "  (SELECT COUNT(*) FROM prices pr JOIN stores s ON s.id=pr.store_id WHERE s.chain='Selver' AND s.is_online=TRUE) AS selver_price_rows;" \
            '' \
            'COMMIT;' \
          | psql "$DATABASE_URL"

      - name: Upload probe artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: selver-ean-probe-${{ github.run_id }}
          path: |
            data/prisma_eans_to_probe.csv
            data/selver_probe.csv
          if-no-files-found: warn
          retention-days: 7
