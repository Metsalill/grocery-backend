name: "Selver Category Crawl (food)"

on:
  workflow_dispatch: {}
  schedule:
    - cron: "42 3 * * *"

jobs:
  crawl-and-upsert:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          pip install -r requirements-scraper.txt || pip install aiohttp beautifulsoup4 lxml asyncpg playwright
          python -m playwright install --with-deps chromium

      - name: Prepare workspace
        run: mkdir -p data

      - name: Crawl Selver categories (Playwright)
        env:
          OUTPUT_CSV: data/selver.csv
          REQ_DELAY: "0.8"
          PAGE_LIMIT: "0"           # 0 = no page cap
          CATEGORIES_FILE: data/selver_categories.txt
        run: python scripts/selver_crawl_categories_pw.py

      # (keep your existing "Load CSV into staging & upsert" step exactly as you have it)
      - name: Load CSV into staging & upsert
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -s data/selver.csv ]; then
            echo "No rows in data/selver.csv â€” skipping load."
            exit 0
          fi
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          BEGIN;
          CREATE TABLE IF NOT EXISTS public.staging_selver_products (
            ext_id        text PRIMARY KEY,
            name          text NOT NULL,
            ean_raw       text,
            ean_norm      text GENERATED ALWAYS AS (regexp_replace(COALESCE(ean_raw,''), '\D','','g')) STORED,
            size_text     text,
            price         numeric(12,2) NOT NULL,
            currency      text DEFAULT 'EUR',
            category_path text,
            category_leaf text,
            collected_at  timestamptz DEFAULT now()
          );
          CREATE INDEX IF NOT EXISTS ix_selver_ean       ON public.staging_selver_products (ean_norm);
          CREATE INDEX IF NOT EXISTS ix_selver_name_trgm ON public.staging_selver_products USING gin (name gin_trgm_ops);
          TRUNCATE TABLE public.staging_selver_products;
          COMMIT;
          SQL

          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c \
            "\copy public.staging_selver_products (ext_id,name,ean_raw,size_text,price,currency,category_path,category_leaf) FROM 'data/selver.csv' CSV HEADER"

          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          DO $$
          BEGIN
            IF EXISTS (
              SELECT 1 FROM pg_constraint c
              JOIN pg_class t ON t.oid = c.conrelid
              WHERE c.conname = 'uq_prices_store_product' AND t.relname='prices'
            ) THEN
              WITH banned(kw) AS ( VALUES
                ('sisustus'),('kodutekstiil'),('valgustus'),('kardin'),('jouluvalgustid'),
                ('vaikesed-sisustuskaubad'),('kuunlad'),('kook-ja-lauakatmine'),
                ('uhekordsed-noud'),('kirja-ja-kontoritarbed'),('remondi-ja-turvatooted'),
                ('kulmutus-ja-kokkamisvahendid'),('omblus-ja-kasitootarbed'),('meisterdamine'),
                ('ajakirjad'),('autojuhtimine'),('kotid'),('aed-ja-lilled'),('lemmikloom'),
                ('sport'),('pallimangud'),('jalgrattasoit'),('ujumine'),('matkamine'),
                ('tervisesport'),('manguasjad'),('lutid'),('lapsehooldus'),('ideed-ja-hooajad'),
                ('kodumasinad'),('elektroonika'),('meelelahutuselektroonika'),
                ('vaikesed-kodumasinad'),('lambid-patareid-ja-taskulambid'),
                ('ilu-ja-tervis'),('kosmeetika'),('meigitooted'),('hugieen'),
                ('loodustooted-ja-toidulisandid')
              ),
              filtered AS (
                SELECT st.* FROM public.staging_selver_products st
                WHERE NOT EXISTS (
                  SELECT 1 FROM banned
                  WHERE lower(COALESCE(st.category_path,'') || ' ' ||
                              COALESCE(st.category_leaf,'') || ' ' ||
                              COALESCE(st.name,'')) LIKE '%' || banned.kw || '%'
                )
              )
              INSERT INTO public.prices (store_id, product_id, price, currency, collected_at)
              SELECT
                (SELECT id FROM public.stores WHERE name='Selver e-pood'),
                pe.product_id,
                f.price, f.currency, now()
              FROM filtered f
              JOIN public.product_eans pe ON pe.ean_norm = f.ean_norm
              ON CONFLICT ON CONSTRAINT uq_prices_store_product DO UPDATE
                SET price = EXCLUDED.price,
                    currency = EXCLUDED.currency,
                    collected_at = EXCLUDED.collected_at;
            ELSE
              RAISE NOTICE 'Skipping price upsert (uq_prices_store_product not found).';
            END IF;
          END$$;

          INSERT INTO public.selver_candidates (ext_id, ean_norm, name, size_text, price, currency, category_path, category_leaf)
          SELECT f.ext_id, f.ean_norm, f.name, f.size_text, f.price, f.currency, f.category_path, f.category_leaf
          FROM public.staging_selver_products f
          LEFT JOIN public.product_eans pe ON pe.ean_norm = f.ean_norm
          WHERE pe.product_id IS NULL
          ON CONFLICT (ext_id) DO UPDATE
            SET price         = EXCLUDED.price,
                currency      = EXCLUDED.currency,
                size_text     = COALESCE(EXCLUDED.size_text, public.selver_candidates.size_text),
                category_path = COALESCE(EXCLUDED.category_path, public.selver_candidates.category_path),
                category_leaf = COALESCE(EXCLUDED.category_leaf, public.selver_candidates.category_leaf),
                last_seen     = now();

          SELECT
            (SELECT COUNT(*) FROM public.staging_selver_products) AS staged,
            (SELECT COUNT(*) FROM public.prices WHERE store_id=(SELECT id FROM public.stores WHERE name='Selver e-pood')) AS price_rows,
            (SELECT COUNT(*) FROM public.selver_candidates) AS candidates;
          SQL
