name: "Selver Category Crawl (food)"

on:
  workflow_dispatch:
  schedule:
    - cron: "42 3 * * *"  # 03:42 UTC daily

# replace your current concurrency block with this:
concurrency:
  group: ${{ github.event_name == 'workflow_dispatch' && format('selver-category-crawl-{0}', github.run_id) || 'selver-category-crawl' }}
  cancel-in-progress: true

jobs:
  crawl-and-upsert:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (crawler + Playwright)
        run: |
          pip install -r requirements-scraper.txt || pip install aiohttp beautifulsoup4 lxml asyncpg playwright
          python -m playwright install --with-deps chromium

      - name: Prepare workspace
        run: mkdir -p data

      - name: Crawl Selver categories (Playwright)
        shell: bash
        env:
          PYTHONUNBUFFERED: "1"           # live python stdout/stderr
          DEBUG: "pw:api"                 # verbose Playwright action logs
          OUTPUT_CSV: data/selver.csv
          REQ_DELAY: "0.6"
          PAGE_LIMIT: "0"                 # 0 = crawl all pages
          CATEGORIES_FILE: data/selver_categories.txt
          ALLOWLIST_ONLY: "1"             # use strict allowlist in the script
        run: |
          set -euo pipefail
          set -x
          echo "::group::Runtime info"
          python --version
          echo "Start (UTC): $(date -u)"
          echo "::endgroup::"

          # Run crawler for up to 12 minutes, line-buffered, and tee the log
          stdbuf -oL -eL timeout 12m python -u scripts/selver_crawl_categories_pw.py \
            2>&1 | tee data/selver_run.log
          status=${PIPESTATUS[0]}

          echo "End (UTC): $(date -u) — crawler exit code: ${status}"

          echo "::group::Crawler outputs"
          ls -lah data || true
          [ -f data/selver.csv ] && { echo "CSV size:"; wc -l data/selver.csv; du -h data/selver.csv; } || echo "CSV not found"
          [ -f data/selver_run.log ] && { echo "Log size:"; du -h data/selver_run.log; } || echo "Log not found"
          echo "::endgroup::"

          # don't fail the job if crawler non-zero — we still want artifacts
          if [ "${status}" -ne 0 ]; then
            echo "::warning::Crawler exited non-zero (${status}); continuing"
          fi

      - name: Dump crawler log (tail)
        if: always()
        run: |
          echo "----- last 300 lines of data/selver_run.log -----"
          if [ -f data/selver_run.log ]; then
            tail -n 300 data/selver_run.log
          else
            echo "(no log found)"
          fi

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Show CSV head (debug)
        if: always()
        run: |
          set -euo pipefail
          ls -l data || true
          echo "---- line count ----"
          wc -l data/selver.csv || true
          echo "---- first 10 lines ----"
          head -n 10 data/selver.csv || true
          if [ ! -s data/selver.csv ] && [ -s data/selver-sample.csv ]; then
            echo "Crawl produced no rows; using data/selver-sample.csv as fallback."
            cp -f data/selver-sample.csv data/selver.csv
          fi

      - name: Upload crawl artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: selver-crawl-${{ github.run_id }}
          path: |
            data/selver.csv
            data/selver_run.log
            data/selver_debug/**/*.png
          if-no-files-found: warn
          retention-days: 7

      - name: Prepare DB (staging & helper tables)
        shell: bash
        run: |
          set -euo pipefail
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          BEGIN;
          CREATE TABLE IF NOT EXISTS public.staging_selver_products (
            ext_id        text PRIMARY KEY,
            name          text NOT NULL,
            ean_raw       text,
            ean_norm      text GENERATED ALWAYS AS (regexp_replace(COALESCE(ean_raw,''), '\D','','g')) STORED,
            size_text     text,
            price         numeric(12,2) NOT NULL,
            currency      text DEFAULT 'EUR',
            category_path text,
            category_leaf text,
            collected_at  timestamptz DEFAULT now()
          );
          CREATE INDEX IF NOT EXISTS ix_selver_ean       ON public.staging_selver_products (ean_norm);
          CREATE INDEX IF NOT EXISTS ix_selver_name_trgm ON public.staging_selver_products USING gin (name gin_trgm_ops);

          -- Ensure store exists
          INSERT INTO public.stores (name, chain)
          SELECT 'Selver e-pood', 'Selver'
          WHERE NOT EXISTS (SELECT 1 FROM public.stores WHERE name='Selver e-pood');

          -- Candidates table for unlinked EANs
          CREATE TABLE IF NOT EXISTS public.selver_candidates (
            ext_id        text PRIMARY KEY,
            ean_norm      text,
            name          text,
            size_text     text,
            price         numeric(12,2),
            currency      text,
            category_path text,
            category_leaf text,
            last_seen     timestamptz DEFAULT now()
          );
          COMMIT;

          TRUNCATE TABLE public.staging_selver_products;
          SQL

      - name: Load CSV into staging & upsert
        shell: bash
        run: |
          set -euo pipefail

          if [ ! -s data/selver.csv ]; then
            echo "No rows in data/selver.csv — skipping load."
            exit 0
          fi

          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c \
            "\copy public.staging_selver_products (ext_id,name,ean_raw,size_text,price,currency,category_path,category_leaf) FROM 'data/selver.csv' CSV HEADER"

          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          DO $$
          BEGIN
            IF EXISTS (
              SELECT 1 FROM pg_constraint c
              JOIN pg_class t ON t.oid = c.conrelid
              WHERE c.conname = 'uq_prices_store_product'
                AND t.relname = 'prices'
            ) THEN
              WITH banned(kw) AS ( VALUES
                ('sisustus'),('kodutekstiil'),('valgustus'),('kardin'),('jouluvalgustid'),
                ('vaikesed-sisustuskaubad'),('kuunlad'),('kook-ja-lauakatmine'),
                ('uhekordsed-noud'),('kirja-ja-kontoritarbed'),('remondi-ja-turvatooted'),
                ('kulmutus-ja-kokkamisvahendid'),('omblus-ja-kasitootarbed'),('meisterdamine'),
                ('ajakirjad'),('autojuhtimine'),('kotid'),('aed-ja-lilled'),('lemmikloom'),
                ('sport'),('pallimangud'),('jalgrattasoit'),('ujumine'),('matkamine'),
                ('tervisesport'),('manguasjad'),('lutid'),('lapsehooldus'),('ideed-ja-hooajad'),
                ('kodumasinad'),('elektroonika'),('meelelahutuselektroonika'),
                ('vaikesed-kodumasinad'),('lambid-patareid-ja-taskulambid'),
                ('ilu-ja-tervis'),('kosmeetika'),('meigitooted'),('hugieen'),
                ('loodustooted-ja-toidulisandid')
              ),
              filtered AS (
                SELECT st.* FROM public.staging_selver_products st
                WHERE NOT EXISTS (
                  SELECT 1 FROM banned
                  WHERE lower(COALESCE(st.category_path,'') || ' ' ||
                              COALESCE(st.category_leaf,'') || ' ' ||
                              COALESCE(st.name,'')) LIKE '%' || banned.kw || '%'
                )
              )
              INSERT INTO public.prices (store_id, product_id, price, currency, collected_at)
              SELECT
                (SELECT id FROM public.stores WHERE name='Selver e-pood'),
                pe.product_id,
                f.price, f.currency, now()
              FROM filtered f
              JOIN public.product_eans pe ON pe.ean_norm = f.ean_norm
              ON CONFLICT ON CONSTRAINT uq_prices_store_product DO UPDATE
                SET price = EXCLUDED.price,
                    currency = EXCLUDED.currency,
                    collected_at = EXCLUDED.collected_at;
            ELSE
              RAISE NOTICE 'Skipping price upsert (uq_prices_store_product not found).';
            END IF;
          END$$;

          WITH banned(kw) AS ( VALUES
            ('sisustus'),('kodutekstiil'),('valgustus'),('kardin'),('jouluvalgustid'),
            ('vaikesed-sisustuskaubad'),('kuunlad'),('kook-ja-lauakatmine'),
            ('uhekordsed-noud'),('kirja-ja-kontoritarbed'),('remondi-ja-turvatooted'),
            ('kulmutus-ja-kokkamisvahendid'),('omblus-ja-kasitootarbed'),('meisterdamine'),
            ('ajakirjad'),('autojuhtimine'),('kotid'),('aed-ja-lilled'),('lemmikloom'),
            ('sport'),('pallimangud'),('jalgrattasoit'),('ujumine'),('matkamine'),
            ('tervisesport'),('manguasjad'),('lutid'),('lapsehooldus'),('ideed-ja-hooajad'),
            ('kodumasinad'),('elektroonika'),('meelelahutuselektroonika'),
            ('vaikesed-kodumasinad'),('lambid-patareid-ja-taskulambid'),
            ('ilu-ja-tervis'),('kosmeetika'),('meigitooted'),('hugieen'),
            ('loodustooted-ja-toidulisandid')
          ),
          filtered AS (
            SELECT st.* FROM public.staging_selver_products st
            WHERE NOT EXISTS (
              SELECT 1 FROM banned
              WHERE lower(COALESCE(st.category_path,'') || ' ' ||
                          COALESCE(st.category_leaf,'') || ' ' ||
                          COALESCE(st.name,'')) LIKE '%' || banned.kw || '%'
            )
          )
          INSERT INTO public.selver_candidates (ext_id, ean_norm, name, size_text, price, currency, category_path, category_leaf)
          SELECT f.ext_id, f.ean_norm, f.name, f.size_text, f.price, f.currency, f.category_path, f.category_leaf
          FROM filtered f
          LEFT JOIN public.product_eans pe ON pe.ean_norm = f.ean_norm
          WHERE pe.product_id IS NULL
          ON CONFLICT (ext_id) DO UPDATE
            SET price         = EXCLUDED.price,
                currency      = EXCLUDED.currency,
                size_text     = COALESCE(EXCLUDED.size_text, public.selver_candidates.size_text),
                category_path = COALESCE(EXCLUDED.category_path, public.selver_candidates.category_path),
                category_leaf = COALESCE(EXCLUDED.category_leaf, public.selver_candidates.category_leaf),
                last_seen     = now();

          SELECT
            (SELECT COUNT(*) FROM public.staging_selver_products) AS staged,
            (SELECT COUNT(*) FROM public.prices WHERE store_id=(SELECT id FROM public.stores WHERE name='Selver e-pood')) AS price_rows,
            (SELECT COUNT(*) FROM public.selver_candidates) AS candidates;
          SQL
