name: Load Selver CSV

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 4 * * 1"   # Mondays 04:00 UTC (adjust or remove if not needed)

jobs:
  load-selver:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Sanity check DB connection
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\conninfo"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "SELECT now();"

      - name: Load CSV into staging_selver_products
        run: |
          set -euo pipefail
          # ensure staging exists (no-op if already created by your migrations)
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          -- optional safety
          CREATE TABLE IF NOT EXISTS public.staging_selver_products (
            ext_id       text PRIMARY KEY,
            name         text NOT NULL,
            ean_raw      text,
            ean_norm     text GENERATED ALWAYS AS (regexp_replace(COALESCE(ean_raw, ''), '\D', '', 'g')) STORED,
            size_text    text,
            price        numeric(12,2) NOT NULL,
            currency     text DEFAULT 'EUR',
            collected_at timestamptz DEFAULT now()
          );
          -- helpful indexes (no-ops if already exist)
          CREATE INDEX IF NOT EXISTS ix_selver_ean    ON public.staging_selver_products (ean_norm);
          CREATE INDEX IF NOT EXISTS ix_selver_name_trgm ON public.staging_selver_products USING gin (name gin_trgm_ops);
          TRUNCATE public.staging_selver_products;
          SQL

          # \copy reads from the runner filesystem (the file from your repo)
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "\copy public.staging_selver_products(ext_id,name,ean_raw,size_text,price,currency) FROM 'data/selver.csv' WITH (FORMAT csv, HEADER true, DELIMITER ',', QUOTE '\"')"

      - name: Upsert matched rows into prices (by EAN)
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          INSERT INTO public.prices (store_id, product_id, price, currency, collected_at)
          SELECT
            s.id,
            pe.product_id,
            st.price,
            COALESCE(st.currency, 'EUR'),
            st.collected_at
          FROM public.staging_selver_products st
          JOIN public.product_eans pe ON pe.ean_norm = st.ean_norm
          JOIN public.stores s       ON s.name = 'Selver e-pood'
          ON CONFLICT ON CONSTRAINT uq_prices_store_product_at
          DO UPDATE SET
            price        = EXCLUDED.price,
            currency     = EXCLUDED.currency,
            collected_at = EXCLUDED.collected_at;
          SQL

      - name: Quick report
        run: |
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          \t on
          \pset format aligned
          SELECT 'staged_rows' AS label, COUNT(*) AS value FROM public.staging_selver_products
          UNION ALL
          SELECT 'inserted_or_updated', COUNT(*) FROM public.prices
           WHERE store_id = (SELECT id FROM public.stores WHERE name='Selver e-pood')
             AND collected_at > now() - interval '1 hour';
          -- Optional: peek at unmatched-with-ean view if you created it
          -- SELECT COUNT(*) AS unmatched_with_ean FROM public.v_selver_unmatched_with_ean;
          SQL
