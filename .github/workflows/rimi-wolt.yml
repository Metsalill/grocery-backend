name: Rimi Wolt (crawl + EAN merge)

on:
  workflow_dispatch:
    inputs:
      venue_slug:
        description: "Wolt venue slug"
        required: true
        default: "rimi-haabersti"
      categories_path:
        description: "Path to category URLs/slugs file"
        required: true
        default: "data/rimi-haabersti.txt"
      out_path:
        description: "Output CSV path (also artifact path)"
        required: true
        default: "out/rimi_wolt_haabersti.csv"
      run_merge:
        description: "Run DB merge to update EANs"
        required: true
        default: "true"
        type: choice
        options: ["true", "false"]
      run_fuzzy:
        description: "Second pass: fuzzy name match (pg_trgm)"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

permissions:
  contents: read

concurrency:
  group: rimi-wolt-${{ github.ref }}
  cancel-in-progress: true

jobs:
  crawl:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Ensure output dir
        run: |
          mkdir -p "$(dirname '${{ inputs.out_path }}')"

      - name: Run Wolt â†’ Rimi crawler
        run: |
          python scripts/wolt_rimi_crawler.py \
            --venue-slug "${{ inputs.venue_slug }}" \
            --categories-file "${{ inputs.categories_path }}" \
            --language et \
            --out "${{ inputs.out_path }}" \
            --delay 0.2

      - name: Upload CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: rimi-wolt-csv
          path: ${{ inputs.out_path }}
          if-no-files-found: error

  merge:
    needs: crawl
    if: ${{ inputs.run_merge == 'true' }}
    runs-on: ubuntu-latest
    env:
      # Must be EXTERNAL Railway URL (not postgres.railway.internal)
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}
      RUN_FUZZY: ${{ inputs.run_fuzzy }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download CSV artifact
        uses: actions/download-artifact@v4
        with:
          name: rimi-wolt-csv
          path: artifact

      - name: Show artifact files
        run: ls -la artifact || true

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends postgresql-client

      - name: Normalize DATABASE_URL for SSL (if missing)
        id: dburl
        shell: bash
        run: |
          if [[ -z "${DATABASE_URL}" ]]; then
            echo "DATABASE_URL is empty"; exit 1
          fi
          if [[ "${DATABASE_URL}" == *"postgres.railway.internal"* ]]; then
            echo "Internal Railway hostname detected. Use EXTERNAL connection string with sslmode=require." >&2
            exit 2
          fi
          if [[ "${DATABASE_URL}" != *"sslmode="* ]]; then
            if [[ "${DATABASE_URL}" == *"?"* ]]; then
              echo "conn=${DATABASE_URL}&sslmode=require" >> $GITHUB_OUTPUT
            else
              echo "conn=${DATABASE_URL}?sslmode=require" >> $GITHUB_OUTPUT
            fi
          else
            echo "conn=${DATABASE_URL}" >> $GITHUB_OUTPUT
          fi
          echo "Normalized connection string ready."

      - name: Merge EANs into Rimi products
        env:
          CSV_PATH: artifact/${{ inputs.out_path }}
          CONN: ${{ steps.dburl.outputs.conn }}
          RUN_FUZZY: ${{ inputs.run_fuzzy }}
        run: |
          set -euo pipefail
          if [ ! -f "${CSV_PATH}" ]; then
            CSV_PATH="$(ls artifact/*.csv | head -n1)"
            echo "Resolved CSV_PATH to ${CSV_PATH}"
          fi

          cat > /tmp/rimi_wolt_merge.sql <<'SQL'
          \echo === Load CSV into temp table ===
          DROP TABLE IF EXISTS tmp_wolt_rimi;
          CREATE TEMP TABLE tmp_wolt_rimi (
            chain              text,
            channel            text,
            venue_slug         text,
            category_slug      text,
            category_name      text,
            ext_id             text,
            name               text,
            brand              text,
            price              text,
            currency           text,
            unit_price_value   text,
            unit_price_unit    text,
            barcode_gtin       text,
            barcode_gtin_text  text,
            description        text,
            image_url          text
          );

          \echo Copying from :csvpath
          \copy tmp_wolt_rimi FROM :'csvpath' WITH (FORMAT csv, HEADER true, ENCODING 'utf8')

          ALTER TABLE tmp_wolt_rimi ADD COLUMN ean text;
          UPDATE tmp_wolt_rimi
             SET ean = regexp_replace(barcode_gtin, '[^0-9Xx]', '', 'g')
           WHERE barcode_gtin IS NOT NULL AND barcode_gtin <> '';

          ALTER TABLE tmp_wolt_rimi ADD COLUMN name_norm text;
          UPDATE tmp_wolt_rimi
             SET name_norm = regexp_replace(lower(name), '\s+', ' ', 'g');

          CREATE TABLE IF NOT EXISTS audit_rimi_ean_updates (
            product_id   bigint,
            old_ean      text,
            new_ean      text,
            src_category text,
            src_name     text,
            src_barcode  text,
            updated_at   timestamptz DEFAULT now()
          );

          \echo === Pass 1: exact normalized name match ===
          WITH rimi_products AS (
            SELECT DISTINCT p.id, lower(regexp_replace(p.name, '\s+', ' ', 'g')) AS name_norm
              FROM products p
              JOIN prices pr ON pr.product_id = p.id
              JOIN stores s  ON s.i
