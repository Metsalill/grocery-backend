name: "Import Haapsalu→Vändra EAN matches (one-off)"

on:
  workflow_dispatch:
    inputs:
      csv_path:
        description: "Path to merged matches CSV (committed in the repo)"
        required: true
        default: "data/matces_haapsalu_vandra_all.csv"

jobs:
  import:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Sanity check file exists
        run: |
          test -f "${{ inputs.csv_path }}" || { echo "::error file not found::${{ inputs.csv_path }}"; exit 1; }
          ls -lh "${{ inputs.csv_path }}"

      - name: Import & apply
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}
        run: |
          set -euo pipefail

          echo "==> Taking safety snapshot of current Vändra rows"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          DROP TABLE IF EXISTS staging_coop_products_backup_vandra_before_ean;
          CREATE TABLE staging_coop_products_backup_vandra_before_ean AS
          SELECT * FROM staging_coop_products WHERE store_host = 'vandra.ecoop.ee';
          SQL

          echo "==> Create persistent staging table for matches"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          DROP TABLE IF EXISTS staging_vandra_haapsalu_matches;
          CREATE TABLE staging_vandra_haapsalu_matches (
            vandra_name       text,
            vandra_size       text,
            vandra_brand      text,
            vandra_price      text,
            vandra_image_url  text,
            vandra_url        text,
            vandra_ean        text,
            haapsalu_name     text,
            haapsalu_size     text,
            haapsalu_brand    text,
            haapsalu_price    text,
            haapsalu_image_url text,
            haapsalu_url      text,
            haapsalu_ean      text,
            score             numeric,
            match_strength    text
          );
          SQL

          echo "==> COPY CSV into staging table"
          # NOTE: the CSV must have a header row with the same column names as above.
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 \
            -c "\copy staging_vandra_haapsalu_matches FROM '${{ inputs.csv_path }}' CSV HEADER"

          echo "==> Quick row count from staging file"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          SELECT COUNT(*) AS staged_rows,
                 SUM( (haapsalu_ean ~ '^[0-9]+$' AND length(haapsalu_ean) IN (8,12,13,14))::int ) AS valid_haapsalu_eans
          FROM staging_vandra_haapsalu_matches;
          SQL

          echo "==> Apply: overwrite Vändra EAN using Haapsalu EAN (only unambiguous per name+size)"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          WITH dedup AS (
            SELECT
              lower(trim(vandra_name)) AS key_name,
              coalesce(vandra_size,'') AS key_size,
              MIN(haapsalu_ean)        AS ean_raw,
              COUNT(DISTINCT haapsalu_ean) AS n_eans
            FROM staging_vandra_haapsalu_matches
            WHERE haapsalu_ean ~ '^[0-9]+$'
              AND length(haapsalu_ean) IN (8,12,13,14)
            GROUP BY 1,2
            HAVING COUNT(DISTINCT haapsalu_ean) = 1
          )
          UPDATE staging_coop_products v
          SET ean_raw = d.ean_raw
          FROM dedup d
          WHERE v.store_host = 'vandra.ecoop.ee'
            AND lower(trim(v.name)) = d.key_name
            AND coalesce(v.size_text,'') = d.key_size
            AND coalesce(v.ean_raw,'') <> d.ean_raw;
          SQL

          echo "==> Post-update report for Vändra"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          WITH v AS (
            SELECT * FROM staging_coop_products WHERE store_host = 'vandra.ecoop.ee'
          )
          SELECT
            COUNT(*) AS total_vandra_rows,
            SUM((ean_raw ~ '^[0-9]+$' AND length(ean_raw) IN (8,12,13,14))::int) AS with_valid_ean,
            SUM((ean_raw IS NULL OR ean_raw = '' OR NOT (ean_raw ~ '^[0-9]+$'))::int) AS missing_or_invalid
          FROM v;
          SQL

      - name: Post Checkout
        if: always()
        run: echo "Done."
