name: Export Rimi products from Railway

on:
  workflow_dispatch:
    inputs:
      chain:
        description: "Store chain to export"
        required: true
        default: "Rimi"
      out_path:
        description: "Output CSV path (created in repo workspace)"
        required: true
        default: "out/rimi_export.csv"

permissions:
  contents: read

concurrency:
  group: export-rimi-${{ github.ref }}
  cancel-in-progress: true

jobs:
  export:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}   # external URL, ideally with sslmode=require
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends postgresql-client

      - name: Normalize DATABASE_URL for SSL (if missing)
        id: dburl
        shell: bash
        run: |
          if [[ -z "${DATABASE_URL}" ]]; then
            echo "DATABASE_URL is empty"; exit 1
          fi
          if [[ "${DATABASE_URL}" == *"postgres.railway.internal"* ]]; then
            echo "Use the EXTERNAL Railway connection string (with sslmode=require)." >&2
            exit 2
          fi
          if [[ "${DATABASE_URL}" != *"sslmode="* ]]; then
            if [[ "${DATABASE_URL}" == *"?"* ]]; then
              echo "conn=${DATABASE_URL}&sslmode=require" >> $GITHUB_OUTPUT
            else
              echo "conn=${DATABASE_URL}?sslmode=require" >> $GITHUB_OUTPUT
            fi
          else
            echo "conn=${DATABASE_URL}" >> $GITHUB_OUTPUT
          fi

      - name: Export products for chain (robust literal-path \copy)
        env:
          CONN: ${{ steps.dburl.outputs.conn }}
          OUT: ${{ inputs.out_path }}
          CHAIN_IN: ${{ inputs.chain }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "${OUT}")"

          # Escape single quotes in values we interpolate into SQL
          CHAIN_ESCAPED=$(printf "%s" "${CHAIN_IN}" | sed "s/'/''/g")
          OUT_ESCAPED=$(printf "%s" "${OUT}" | sed "s/'/''/g")

          # Write a psql script; we embed the outfile as a *literal* string
          cat > /tmp/export_chain.sql <<EOF
          \\set ON_ERROR_STOP on
          \\pset footer off
          \\echo === Exporting products for chain ${CHAIN_ESCAPED} ===

          \\copy (
            WITH rimi_products AS (
              SELECT DISTINCT
                p.id,
                p.name,
                p.brand,
                trim(both ' ' from concat(NULLIF(p.net_qty::text, ''), ' ', NULLIF(p.net_unit, ''))) AS size_text,
                p.ean
              FROM products p
              JOIN prices  pr ON pr.product_id = p.id
              JOIN stores  s  ON s.id         = pr.store_id
              WHERE lower(s.chain) = lower('${CHAIN_ESCAPED}')
            )
            SELECT
              id,
              name,
              brand,
              size_text,
              ean,
              regexp_replace(lower(name), '\\\\s+', ' ', 'g') AS name_norm
            FROM rimi_products
            ORDER BY name
          ) TO '${OUT_ESCAPED}' WITH (FORMAT csv, HEADER, ENCODING 'UTF8');
          EOF

          # Run it
          psql "${CONN}" -f /tmp/export_chain.sql -v ON_ERROR_STOP=1 -e

      - name: Upload CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: rimi-export
          path: ${{ inputs.out_path }}
          if-no-files-found: error
