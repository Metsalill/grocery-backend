name: Export Rimi products from Railway

on:
  workflow_dispatch:
    inputs:
      chain:
        description: "Store chain to export"
        required: true
        default: "Rimi"
      out_path:
        description: "Output CSV path (created in repo workspace)"
        required: true
        default: "out/rimi_export.csv"

permissions:
  contents: read

concurrency:
  group: export-rimi-${{ github.ref }}
  cancel-in-progress: true

jobs:
  export:
    runs-on: ubuntu-latest
    env:
      # MUST be the EXTERNAL Railway URL. Add `?sslmode=require` if your URL lacks it.
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary

      - name: Export products for chain (Python + psycopg2 copy_expert)
        env:
          DBURL: ${{ env.DATABASE_URL }}
          CHAIN: ${{ inputs.chain }}
          OUT_PATH: ${{ inputs.out_path }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, sys, pathlib
          import psycopg2

          dburl    = os.environ["DBURL"]
          chain    = os.environ["CHAIN"]
          out_path = os.environ["OUT_PATH"]

          # Ensure sslmode=require is present (safe no-op if already there)
          if "sslmode=" not in dburl:
            sep = "&" if "?" in dburl else "?"
            dburl = f"{dburl}{sep}sslmode=require"

          pathlib.Path(out_path).parent.mkdir(parents=True, exist_ok=True)

          sql = """
          COPY (
            WITH rimi_products AS (
              SELECT DISTINCT
                p.id,
                p.name,
                p.brand,
                trim(both ' ' from concat(NULLIF(p.net_qty::text, ''), ' ', NULLIF(p.net_unit, ''))) AS size_text,
                p.ean
              FROM products p
              JOIN prices  pr ON pr.product_id = p.id
              JOIN stores  s  ON s.id         = pr.store_id
              WHERE lower(s.chain) = lower(%s)
            )
            SELECT
              id,
              name,
              brand,
              size_text,
              ean,
              regexp_replace(lower(name), '\\s+', ' ', 'g') AS name_norm
            FROM rimi_products
            ORDER BY name
          ) TO STDOUT WITH CSV HEADER ENCODING 'UTF8'
          """

          # Connect and stream to file
          with psycopg2.connect(dburl) as conn:
            with conn.cursor() as cur:
              # COPY doesn't accept bind params directly; use mogrify to safely inject
              final = cur.mogrify(sql, (chain,)).decode("utf-8")
              with open(out_path, "w", encoding="utf-8", newline="") as f:
                cur.copy_expert(final, f)

          print(f"Export written to {out_path}")
          PY

      - name: Upload CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: rimi-export
          path: ${{ inputs.out_path }}
          if-no-files-found: error
