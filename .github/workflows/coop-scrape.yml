name: "Coop – Category Crawl (Playwright) + optional DB upsert"

on:
  workflow_dispatch:
    inputs:
      region:
        description: "Base region URL (e.g., https://coophaapsalu.ee or https://vandra.ecoop.ee)"
        required: false
        default: "https://vandra.ecoop.ee"
      categories_multiline:
        description: "Category URLs or paths (one per line), e.g. /et/tooted/53-joogid"
        required: false
        default: ""
      categories_file_url:
        description: "Optional raw URL to a .txt file with categories (one per line)"
        required: false
        default: ""
      page_limit:
        description: "Discovery cap per category (0 = all)"
        required: false
        default: "0"
      max_products:
        description: "Post-discovery cap per category (0 = all)"
        required: false
        default: "0"
      headless:
        description: "Chromium headless (1/0)"
        required: false
        default: "1"
      req_delay:
        description: "Delay between actions (seconds)"
        required: false
        default: "0.5"
      pdp_workers:
        description: "Concurrent PDP tabs per category"
        required: false
        default: "4"
      shards:
        description: "Parallel shards for categories (1–8)."
        required: false
        default: "1"
      upsert_db:
        description: "Set to 1 to upsert into public.staging_coop_products"
        required: false
        default: "0"

  # 05:30 Tallinn daily (02:30 UTC)
  schedule:
    - cron: "30 2 * * *"

concurrency:
  group: coop-scrape-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: false

jobs:
  crawl:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      # We always spawn up to 8 workers; each shard checks its index and exits fast if unused.
      matrix:
        shard: [0, 1, 2, 3, 4, 5, 6, 7]

    env:
      REGION_URL:      ${{ inputs.region }}
      CATS_MULTILINE:  ${{ inputs.categories_multiline }}
      CATS_FILE_URL:   ${{ inputs.categories_file_url }}
      SHARD_COUNT:     ${{ inputs.shards }}
      SHARD_INDEX:     ${{ matrix.shard }}
      COOP_UPSERT_DB:  ${{ inputs.upsert_db }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps & Playwright
        run: |
          python -m pip install --upgrade pip
          pip install playwright==1.46.0 asyncpg
          python -m playwright install --with-deps chromium

      - name: (Optional) Download categories file
        if: ${{ env.CATS_FILE_URL != '' }}
        run: |
          curl -fsSL "$CATS_FILE_URL" -o coop_categories.txt

      # Prefer PUBLIC DSN so runners can reach the DB; fall back to DATABASE_URL if needed.
      - name: Select DB URL (PUBLIC preferred)
        if: ${{ env.COOP_UPSERT_DB == '1' }}
        shell: bash
        run: |
          if [ -n "${{ secrets.DATABASE_URL_PUBLIC }}" ]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_PUBLIC }}" >> "$GITHUB_ENV"
            echo "[db] Using DATABASE_URL_PUBLIC"
          elif [ -n "${{ secrets.DATABASE_URL }}" ]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> "$GITHUB_ENV"
            echo "[db] Using DATABASE_URL fallback"
          else
            echo "[db] No DB secret set; upsert will be skipped by the script."
          fi

      # Tiny DNS sanity check so it's obvious if the host is unreachable from Actions.
      - name: DB DNS debug
        if: ${{ env.COOP_UPSERT_DB == '1' && env.DATABASE_URL != '' }}
        shell: bash
        run: |
          set -e
          # Extract host/port from PostgreSQL URL
          H="$(printf '%s' "$DATABASE_URL" | sed -E 's|.*@([^:/?]+)(:([0-9]+))?.*|\1|')"
          P="$(printf '%s' "$DATABASE_URL" | sed -nE 's|.*@[^:/?]+:([0-9]+).*|\1|p')"
          P="${P:-5432}"
          echo "[db] host=$H port=$P"
          python - <<'PY'
import os, socket
h=os.environ["H"]; p=int(os.environ["P"])
try:
  gi=socket.getaddrinfo(h,p)
  print("[db] getaddrinfo OK entries:", len(gi))
except Exception as e:
  print("[db] getaddrinfo FAILED:", e)
PY
        env:
          H: ${{ env.DATABASE_URL && '' || '' }} # keep env block valid even if DATABASE_URL unset
          P: "5432"

      - name: Run Coop crawler (with repo fallback + sharding)
        shell: bash
        env:
          PAGE_LIMIT:   ${{ inputs.page_limit }}
          MAX_PRODUCTS: ${{ inputs.max_products }}
          HEADLESS:     ${{ inputs.headless }}
          REQ_DELAY:    ${{ inputs.req_delay }}
          PDP_WORKERS:  ${{ inputs.pdp_workers }}
        run: |
          set -euo pipefail
          mkdir -p out

          # Skip unused matrix jobs quickly
          if [ "${SHARD_INDEX}" -ge "${SHARD_COUNT}" ]; then
            echo "[shard] Skipping shard ${SHARD_INDEX} (only ${SHARD_COUNT} requested)."
            exit 0
          fi

          CATS_ALL="coop_categories.txt"
          : > "$CATS_ALL"

          # Order of precedence:
          # 1) downloaded file (if categories_file_url was provided)
          if [ -s "coop_categories.txt" ]; then
            echo ">> using categories from URL"
          # 2) multiline UI input
          elif [ -n "$CATS_MULTILINE" ]; then
            printf '%s\n' "$CATS_MULTILINE" > "$CATS_ALL"
          # 3) repo defaults by region
          else
            if echo "$REGION_URL" | grep -qi 'vandra\.ecoop\.ee'; then
              REPO_FILE="data/coop_vandra_categories.txt"
            elif echo "$REGION_URL" | grep -qi 'coophaapsalu\.ee'; then
              REPO_FILE="data/coop_haapsalu_categories.txt"
            else
              REPO_FILE=""
            fi
            if [ -n "$REPO_FILE" ] && [ -f "$REPO_FILE" ]; then
              echo ">> using repo categories file: $REPO_FILE"
              cp "$REPO_FILE" "$CATS_ALL"
            fi
          fi

          # 4) last-resort tiny default so the job never fails
          if [ ! -s "$CATS_ALL" ]; then
            if echo "$REGION_URL" | grep -qi 'coophaapsalu\.ee'; then
              echo "/tootekategooria/joogid/" > "$CATS_ALL"
            else
              echo "/et/tooted/53-joogid" > "$CATS_ALL"
            fi
          fi

          # Normalize CRLF if pasted from Windows
          sed -e 's/\r$//' -i "$CATS_ALL"

          # Slice the categories per shard (0-based)
          CATS_SHARD="coop_categories_shard.txt"
          awk -v n="${SHARD_COUNT}" -v i="${SHARD_INDEX}" 'NF{ if ((NR-1)%n==i) print }' "$CATS_ALL" > "$CATS_SHARD"
          if [ ! -s "$CATS_SHARD" ]; then
            echo "[shard] No categories assigned to this shard (${SHARD_INDEX}); exiting."
            exit 0
          fi
          echo "=== Categories for shard ${SHARD_INDEX}/${SHARD_COUNT} ==="
          cat "$CATS_SHARD"
          echo "==============================================="

          python scripts/coop_crawl_categories_pw.py \
            --region "$REGION_URL" \
            --categories-multiline "" \
            --categories-file "$CATS_SHARD" \
            --page-limit "$PAGE_LIMIT" \
            --max-products "$MAX_PRODUCTS" \
            --headless "$HEADLESS" \
            --req-delay "$REQ_DELAY" \
            --pdp-workers "$PDP_WORKERS" \
            --out "out/coop_products_${{ github.run_id }}_shard${SHARD_INDEX}.csv"

      - name: Upload CSV artifact
        uses: actions/upload-artifact@v4
        with:
          name: coop-products-${{ github.run_id }}
          path: out/*.csv
          if-no-files-found: warn
          retention-days: 7
