name: Export product CSVs for matching

on:
  workflow_dispatch: {}

jobs:
  export:
    runs-on: ubuntu-latest

    steps:
      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Resolve DB URL (prefer public)
        env:
          URL_PUBLIC: ${{ secrets.DATABASE_URL_PUBLIC }}
          URL_STD:    ${{ secrets.DATABASE_URL }}
          RW_URL:     ${{ secrets.RW_DATABASE_URL }}
        run: |
          db="${URL_PUBLIC:-${URL_STD:-${RW_URL}}}"
          if [ -z "$db" ]; then
            echo "No database URL found in DATABASE_URL_PUBLIC / DATABASE_URL / RW_DATABASE_URL" >&2
            exit 1
          fi
          # ensure sslmode=require if not present
          if [[ "$db" == postgres://* || "$db" == postgresql://* ]]; then
            if [[ "$db" != *"sslmode="* ]]; then
              sep="?"
              [[ "$db" == *"?"* ]] && sep="&"
              db="${db}${sep}sslmode=require"
            fi
          fi
          echo "DB_URL=$db" >> "$GITHUB_ENV"

      - name: Test DB connection
        run: |
          psql -X -v ON_ERROR_STOP=1 "$DB_URL" -c "SELECT version(), now();"

      - name: Bootstrap/refresh SQL (MVs, indexes, matchers, buckets)
        run: |
          psql -X -v ON_ERROR_STOP=1 "$DB_URL" <<'SQL'
          -- Extensions
          CREATE EXTENSION IF NOT EXISTS unaccent;
          CREATE EXTENSION IF NOT EXISTS pg_trgm;

          -- Canonical normalization
          CREATE MATERIALIZED VIEW IF NOT EXISTS products_norm AS
          SELECT
            id AS product_id,
            ean, name, brand, size_text,
            regexp_replace(lower(unaccent(coalesce(brand,''))), '\s+', ' ', 'g') AS brand_norm,
            trim(regexp_replace(lower(unaccent(coalesce(name,''))), '[^0-9a-z]+', ' ', 'g')) AS name_norm,
            trim(
              regexp_replace(
                replace(
                  trim(regexp_replace(lower(unaccent(coalesce(name,''))), '[^0-9a-z]+', ' ', 'g')),
                  regexp_replace(lower(unaccent(coalesce(brand,''))), '\s+', ' ', 'g'),
                  ''
                ),
                '\s+', ' ', 'g'
              )
            ) AS name_core_norm,
            size_to_gml(size_text) AS size_gml
          FROM products;

          -- Rimi candidates normalization
          CREATE MATERIALIZED VIEW IF NOT EXISTS rimi_candidates_norm AS
          SELECT
            ext_id, name, brand, size_text,
            regexp_replace(lower(unaccent(coalesce(brand,''))), '\s+', ' ', 'g') AS brand_norm,
            trim(regexp_replace(lower(unaccent(coalesce(name,''))), '[^0-9a-z]+', ' ', 'g')) AS name_norm,
            trim(
              regexp_replace(
                replace(
                  trim(regexp_replace(lower(unaccent(coalesce(name,''))), '[^0-9a-z]+', ' ', 'g')),
                  regexp_replace(lower(unaccent(coalesce(brand,''))), '\s+', ' ', 'g'),
                  ''
                ),
                '\s+', ' ', 'g'
              )
            ) AS name_core_norm,
            size_to_gml(size_text) AS size_gml
          FROM rimi_candidates;

          -- Indexes for speed
          CREATE INDEX IF NOT EXISTS prod_core_trgm ON products_norm        USING gin (name_core_norm gin_trgm_ops);
          CREATE INDEX IF NOT EXISTS rimi_core_trgm  ON rimi_candidates_norm USING gin (name_core_norm gin_trgm_ops);

          -- Refresh MVs (safe even if already fresh)
          REFRESH MATERIALIZED VIEW products_norm;
          REFRESH MATERIALIZED VIEW rimi_candidates_norm;

          -- Store-side canonical subsets (have price in that store)
          CREATE OR REPLACE VIEW selver_side_norm AS
          WITH sid AS (SELECT id FROM stores WHERE name='Selver e-Selver' LIMIT 1)
          SELECT DISTINCT
            pr.product_id,
            p.ean, p.name, p.brand, p.size_text,
            pn.brand_norm, pn.name_core_norm, pn.size_gml
          FROM prices pr
          JOIN sid ON pr.store_id = sid.id
          JOIN products      p  ON p.id = pr.product_id
          JOIN products_norm pn ON pn.product_id = p.id;

          CREATE OR REPLACE VIEW prisma_side_norm AS
          WITH sid AS (SELECT id FROM stores WHERE name='Prisma Online (Tallinn)' LIMIT 1)
          SELECT DISTINCT
            pr.product_id,
            p.ean, p.name, p.brand, p.size_text,
            pn.brand_norm, pn.name_core_norm, pn.size_gml
          FROM prices pr
          JOIN sid ON pr.store_id = sid.id
          JOIN products      p  ON p.id = pr.product_id
          JOIN products_norm pn ON pn.product_id = p.id;

          -- ---------- Generic score pieces
          -- Helper expression is repeated in the three matchers for clarity.

          -- SELVER <-> RIMI
          CREATE OR REPLACE VIEW v_match_selver_rimi AS
          SELECT
            r.ext_id               AS left_ext_id,
            r.name                 AS left_name,
            r.brand                AS left_brand,
            r.size_text            AS left_size_text,

            s.product_id           AS right_product_id,
            s.ean                  AS right_ean,
            s.name                 AS right_name,
            s.brand                AS right_brand,
            s.size_text            AS right_size_text,

            similarity(r.name_core_norm, s.name_core_norm) AS sim_name,

            CASE WHEN r.brand_norm <> '' AND r.brand_norm = s.brand_norm
                 THEN 0.15 ELSE 0 END AS brand_bonus,

            CASE
              WHEN r.size_gml IS NOT NULL AND s.size_gml IS NOT NULL
                   AND r.size_gml > 0 AND s.size_gml > 0
                   AND abs(r.size_gml - s.size_gml) <= GREATEST(20, (GREATEST(r.size_gml, s.size_gml) * 0.05)::int)
              THEN (1 - (abs(r.size_gml - s.size_gml)::float / GREATEST(r.size_gml, s.size_gml))) * 0.15
              ELSE 0
            END AS size_bonus,

            (r.brand_norm <> '' AND r.brand_norm = s.brand_norm) AS brand_eq,
            (r.size_gml IS NULL OR s.size_gml IS NULL
               OR abs(r.size_gml - s.size_gml) <= GREATEST(20, (GREATEST(r.size_gml, s.size_gml) * 0.05)::int)
            ) AS size_ok,

            ( similarity(r.name_core_norm, s.name
