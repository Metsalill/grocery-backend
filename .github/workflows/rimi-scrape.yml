name: "Rimi → Full scrape (categories → CSV/DB)"

on:
  workflow_dispatch:
    inputs:
      categories_multiline:
        description: "Paste Rimi category URLs (one per line). Example: https://www.rimi.ee/epood/ee/tooted/leivad-saiad-kondiitritooted"
        required: false
        default: ""
      page_limit:
        description: "Max category pages per category (0 = all)"
        required: false
        default: "0"
      max_products:
        description: "Hard cap on total PDPs (0 = unlimited)"
        required: false
        default: "0"
      headless:
        description: "Headless browser (1/0)"
        required: false
        default: "1"
      req_delay:
        description: "Delay between page ops (sec, can be 0.0)"
        required: false
        default: "0.4"
  schedule:
    - cron: "17 2 * * *"   # nightly

concurrency:
  group: rimi-scrape
  cancel-in-progress: true

jobs:
  scrape:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      PYTHONUNBUFFERED: "1"
      OUTPUT_CSV: rimi_products.csv   # <= force the filename your script should write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('scripts/rimi_crawl_categories_pw.py') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install playwright beautifulsoup4 lxml
          python -m playwright install --with-deps chromium

      - name: Verify scraper file exists
        shell: bash
        run: |
          set -euo pipefail
          test -f scripts/rimi_crawl_categories_pw.py || { echo "::error::scripts/rimi_crawl_categories_pw.py missing"; exit 1; }
          python -m py_compile scripts/rimi_crawl_categories_pw.py
          chmod +x scripts/rimi_crawl_categories_pw.py

      - name: Prepare category list
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          if [[ -n "${{ github.event.inputs.categories_multiline }}" ]]; then
            printf "%s\n" "${{ github.event.inputs.categories_multiline }}" | tr -d '\r' | sed '/^[[:space:]]*$/d' > data/rimi_categories.txt
            echo "Using categories from input."
          elif [[ -f data/rimi_categories.txt ]]; then
            echo "Using repo file data/rimi_categories.txt"
          else
            printf '%s\n' 'https://www.rimi.ee/epood/ee/tooted/leivad-saiad-kondiitritooted' > data/rimi_categories.txt
            echo "Using built-in sample category."
          fi
          echo "First few categories:"
          nl -ba data/rimi_categories.txt | sed -n '1,10p'
          if [[ ! -s data/rimi_categories.txt ]]; then
            echo "::warning::No categories found; ending job early."
            exit 0
          fi

      - name: Run scraper (time-boxed, capture logs)
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Runtime"
          python --version
          date -u +"Start (UTC): %Y-%m-%d %H:%M:%S"
          echo "::endgroup::"
          set +e
          set +o pipefail
          stdbuf -oL -eL timeout -k 45s 40m python -u scripts/rimi_crawl_categories_pw.py \
            --cats-file data/rimi_categories.txt \
            --page-limit "${{ github.event.inputs.page_limit }}" \
            --max-products "${{ github.event.inputs.max_products }}" \
            --headless "${{ github.event.inputs.headless }}" \
            --req-delay "${{ github.event.inputs.req_delay }}" \
            > >(tee data/rimi_run.log) 2>data/rimi_run.err
          status=${PIPESTATUS[0]}
          set -o pipefail
          set -e
          echo "Exit code: ${status}"
          echo "::group::Outputs"
          ls -lah || true
          ls -lah data || true
          if [[ -f "${OUTPUT_CSV}" ]]; then
            echo "CSV lines:"
            wc -l "${OUTPUT_CSV}" || true
            echo "CSV size:"
            du -h "${OUTPUT_CSV}" || true
          else
            echo "::warning::CSV not found: ${OUTPUT_CSV}"
          fi
          if [[ -s data/rimi_run.err ]]; then
