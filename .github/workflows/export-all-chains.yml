- name: Export ${{ matrix.chain }} products CSV
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}
        run: |
          set -euo pipefail
          mkdir -p out

          # Find which table has ext_id
          TABLE_WITH_EXT=$(psql "$DATABASE_URL" -At -X -v ON_ERROR_STOP=1 \
            -c "select table_name
                from information_schema.columns
                where table_schema='public' and column_name='ext_id'
                order by table_name limit 1")

          if [ -z "$TABLE_WITH_EXT" ]; then
            echo "ext_id column not found in public schema"; exit 1
          fi

          # Build a qualified reference like alias.ext_id
          # Map table name -> SQL alias used in SELECT
          case "$TABLE_WITH_EXT" in
            prices)   EXT_REF="pr.ext_id" ;;
            products) EXT_REF="p.ext_id" ;;
            stores)   EXT_REF="s.ext_id" ;; # unlikely, but supported
            *)
              # If ext_id is in another table (e.g. store_products), join it
              EXT_JOIN="LEFT JOIN ${TABLE_WITH_EXT} xx ON xx.product_id = p.id AND xx.store_id = s.id"
              EXT_REF="xx.ext_id"
              ;;
          esac

          read -r -d '' SQL_QUERY <<SQL
COPY (
  SELECT
    s.chain,
    s.name AS store_name,
    s.id   AS store_id,
    p.id   AS product_id,
    p.name AS product,
    p.brand,
    p.size_text,
    p.ean,
    ${EXT_REF} AS ext_id,
    pr.price,
    pr.collected_at
  FROM prices pr
  JOIN products p ON p.id = pr.product_id
  JOIN stores   s ON s.id = pr.store_id
  ${EXT_JOIN:-}
  WHERE (s.chain ILIKE '${{ matrix.chain }}%' OR s.name ILIKE '%' || '${{ matrix.chain }}' || '%')
) TO STDOUT WITH (FORMAT CSV, HEADER, ENCODING 'UTF8');
SQL

          echo "$SQL_QUERY" | psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -X \
            > "out/${{ matrix.chain }}_products.csv"
