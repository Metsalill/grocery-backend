name: Seed Rimi physical stores

on:
  workflow_dispatch: {}

jobs:
  seed:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PUBLIC }}

    steps:
      - uses: actions/checkout@v4

      # --- Scrape to CSV ------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install scrape deps
        run: |
          set -euo pipefail
          pip install playwright bs4 lxml requests
          python -m playwright install --with-deps chromium

      - name: Scrape Rimi stores to CSV
        run: |
          set -euo pipefail
          python scripts/scrape_rimi_stores.py \
            --geocode-missing \
            --nominatim-email "marko@minetech.ee" \
            --per-click-wait-ms 1200
          echo "--- preview ---"
          head -n 10 data/rimi_stores.csv || true

      # --- Load into Postgres --------------------------------------------------
      - name: Install psql
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Upsert stores and alias to ePood
        run: |
          set -euo pipefail
          # write SQL to a file so psql meta-commands start at column 0
          cat <<'SQL' > /tmp/rimi_seed.sql
\set ON_ERROR_STOP on

-- staging table
DROP TABLE IF EXISTS staging_rimi_stores;
CREATE TABLE staging_rimi_stores(
  name         text,
  address      text,
  lat          double precision,
  lon          double precision,
  external_key text
);

-- load CSV
\copy staging_rimi_stores(name,address,lat,lon,external_key)
  FROM 'data/rimi_stores.csv'
  WITH (FORMAT csv, HEADER true, NULL '');

-- upsert into stores (assumes unique on (chain,name) exists)
INSERT INTO stores (name, chain, address, lat, lon, latitude, longitude, is_online, external_key)
SELECT
  s.name, 'Rimi',
  NULLIF(s.address,''),
  s.lat, s.lon, s.lat, s.lon,
  false,
  NULLIF(s.external_key,'')
FROM staging_rimi_stores s
WHERE COALESCE(s.name,'') <> ''
ON CONFLICT (chain, name)
DO UPDATE SET
  address      = EXCLUDED.address,
  lat          = EXCLUDED.lat,
  lon          = EXCLUDED.lon,
  latitude     = EXCLUDED.latitude,
  longitude    = EXCLUDED.longitude,
  is_online    = false,
  external_key = COALESCE(EXCLUDED.external_key, stores.external_key);

-- alias physical Rimi stores to ePood id=440
CREATE TABLE IF NOT EXISTS store_price_source (
  store_id        bigint PRIMARY KEY,
  source_store_id bigint NOT NULL
);

INSERT INTO store_price_source (store_id, source_store_id)
SELECT st.id, 440
FROM stores st
WHERE st.chain='Rimi' AND COALESCE(st.is_online,false)=false
ON CONFLICT (store_id) DO UPDATE
SET source_store_id = EXCLUDED.source_store_id;

-- summary
\pset tuples_only on
SELECT 'staging_rows' AS what, COUNT(*) AS count FROM staging_rimi_stores
UNION ALL
SELECT 'physical_rimi_in_stores', COUNT(*) FROM stores WHERE chain='Rimi' AND COALESCE(is_online,false)=false
UNION ALL
SELECT 'aliased_to_440', COUNT(*) FROM store_price_source sps JOIN stores st ON st.id=sps.store_id
       WHERE st.chain='Rimi' AND COALESCE(st.is_online,false)=false AND sps.source_store_id=440;
SQL

          psql "$DATABASE_URL" -f /tmp/rimi_seed.sql
